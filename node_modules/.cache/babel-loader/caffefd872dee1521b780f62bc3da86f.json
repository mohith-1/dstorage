{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\mohith\\\\dstorage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\mohith\\\\dstorage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\mohith\\\\dstorage\\\\src\\\\components\\\\App.js\";\nimport DStorage from '../abis/DStorage.json';\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport Web3 from 'web3';\nimport './App.css';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar projectId = '2Qq5q5v77dYlgwfyv3zxIJqGFPQ'; // Infura Project ID\n\nvar projectSecret = '48f34af62519d7b54b456bad2dd1c1ed'; // Infura Secret\n\nvar auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  headers: {\n    authorization: auth\n  }\n});\n\nclass App extends Component {\n  componentWillMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.loadWeb3();\n\n            case 2:\n              _context.next = 4;\n              return _this.loadBlockchainData();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n\n  loadWeb3() {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context2.next = 6;\n                break;\n              }\n\n              window.web3 = new Web3(window.ethereum);\n              _context2.next = 4;\n              return window.eth_requestaccount();\n\n            case 4:\n              _context2.next = 7;\n              break;\n\n            case 6:\n              if (window.web3) {\n                window.web3 = new Web3(window.web3.currentProvider);\n              } else {\n                window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n\n  loadBlockchainData() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var web3, accounts, networkId, networkData, dstorage, filesCount, i, file;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              web3 = window.web3; // Load account\n\n              _context3.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context3.sent;\n\n              _this2.setState({\n                account: accounts[0]\n              }); // Network ID\n\n\n              _context3.next = 7;\n              return web3.eth.net.getId();\n\n            case 7:\n              networkId = _context3.sent;\n              networkData = DStorage.networks[networkId];\n\n              if (!networkData) {\n                _context3.next = 27;\n                break;\n              }\n\n              // Assign contract\n              dstorage = new web3.eth.Contract(DStorage.abi, networkData.address);\n\n              _this2.setState({\n                dstorage\n              }); // Get files amount\n\n\n              _context3.next = 14;\n              return dstorage.methods.fileCount().call();\n\n            case 14:\n              filesCount = _context3.sent;\n\n              _this2.setState({\n                filesCount\n              }); // Load files&sort by the newest\n\n\n              i = filesCount;\n\n            case 17:\n              if (!(i >= 1)) {\n                _context3.next = 25;\n                break;\n              }\n\n              _context3.next = 20;\n              return dstorage.methods.files(i).call();\n\n            case 20:\n              file = _context3.sent;\n\n              _this2.setState({\n                files: [..._this2.state.files, file]\n              });\n\n            case 22:\n              i--;\n              _context3.next = 17;\n              break;\n\n            case 25:\n              _context3.next = 28;\n              break;\n\n            case 27:\n              window.alert('DStorage contract not deployed to detected network.');\n\n            case 28:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  } // Get file from user\n\n\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result),\n          type: file.type,\n          name: file.name\n        });\n        console.log('buffer', this.state.buffer);\n      };\n    };\n\n    this.uploadFile = description => {\n      console.log(\"Submitting file to IPFS...\"); // Add file to the IPFS\n\n      ipfs.add(this.state.buffer, (error, result) => {\n        console.log('IPFS result', result);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        this.setState({\n          loading: true\n        }); // Assign value for the file without extension\n\n        if (this.state.type === '') {\n          this.setState({\n            type: 'none'\n          });\n        }\n\n        this.state.dstorage.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description).send({\n          from: this.state.account\n        }).on('transactionHash', hash => {\n          this.setState({\n            loading: false,\n            type: null,\n            name: null\n          });\n          window.location.reload();\n        }).on('error', e => {\n          window.alert('Error');\n          this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    this.state = {\n      account: '',\n      dstorage: null,\n      files: [],\n      loading: false,\n      type: null,\n      name: null\n    };\n    this.uploadFile = this.uploadFile.bind(this);\n    this.captureFile = this.captureFile.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      account: this.state.account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      id: \"loader\",\n      className: \"text-center mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 59\n      }\n    }, \"Loading...\")) : /*#__PURE__*/React.createElement(Main, {\n      files: this.state.files,\n      captureFile: this.captureFile,\n      uploadFile: this.uploadFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/mohith/dstorage/src/components/App.js"],"names":["DStorage","React","Component","Navbar","Main","Web3","ipfsClient","require","projectId","projectSecret","auth","Buffer","from","toString","ipfs","host","port","protocol","headers","authorization","App","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","eth_requestaccount","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","dstorage","Contract","abi","address","methods","fileCount","call","filesCount","i","files","file","state","constructor","props","captureFile","event","preventDefault","target","reader","FileReader","readAsArrayBuffer","onloadend","buffer","result","type","name","console","log","uploadFile","description","add","error","loading","hash","size","send","on","location","reload","e","bind","render"],"mappings":"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","sourcesContent":["import DStorage from '../abis/DStorage.json'\r\nimport React, { Component } from 'react';\r\nimport Navbar from './Navbar'\r\nimport Main from './Main'\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\n\r\nconst ipfsClient = require('ipfs-http-client');\r\nconst projectId = '2Qq5q5v77dYlgwfyv3zxIJqGFPQ';   // Infura Project ID\r\nconst projectSecret = '48f34af62519d7b54b456bad2dd1c1ed';  // Infura Secret\r\nconst auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');\r\nconst ipfs = ipfsClient({\r\n    host: 'ipfs.infura.io',\r\n    port: 5001,\r\n    protocol: 'https',\r\n    headers: {\r\n        authorization: auth,\r\n    },\r\n  });\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.eth_requestaccount()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n    // Network ID\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = DStorage.networks[networkId]\r\n    if(networkData) {\r\n      // Assign contract\r\n      const dstorage = new web3.eth.Contract(DStorage.abi, networkData.address)\r\n      this.setState({ dstorage })\r\n      // Get files amount\r\n      const filesCount = await dstorage.methods.fileCount().call()\r\n      this.setState({ filesCount })\r\n      // Load files&sort by the newest\r\n      for (var i = filesCount; i >= 1; i--) {\r\n        const file = await dstorage.methods.files(i).call()\r\n        this.setState({\r\n          files: [...this.state.files, file]\r\n        })\r\n      }\r\n    } else {\r\n      window.alert('DStorage contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n  // Get file from user\r\n  captureFile = event => {\r\n    event.preventDefault()\r\n\r\n    const file = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n\r\n    reader.readAsArrayBuffer(file)\r\n    reader.onloadend = () => {\r\n      this.setState({\r\n        buffer: Buffer(reader.result),\r\n        type: file.type,\r\n        name: file.name\r\n      })\r\n      console.log('buffer', this.state.buffer)\r\n    }\r\n  }\r\n\r\n  uploadFile = description => {\r\n    console.log(\"Submitting file to IPFS...\")\r\n\r\n    // Add file to the IPFS\r\n    ipfs.add(this.state.buffer, (error, result) => {\r\n      console.log('IPFS result', result)\r\n      if(error) {\r\n        console.error(error)\r\n        return\r\n      }\r\n\r\n      this.setState({ loading: true })\r\n      // Assign value for the file without extension\r\n      if(this.state.type === ''){\r\n        this.setState({type: 'none'})\r\n      }\r\n      this.state.dstorage.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\r\n        this.setState({\r\n         loading: false,\r\n         type: null,\r\n         name: null\r\n       })\r\n       window.location.reload()\r\n      }).on('error', (e) =>{\r\n        window.alert('Error')\r\n        this.setState({loading: false})\r\n      })\r\n    })\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      dstorage: null,\r\n      files: [],\r\n      loading: false,\r\n      type: null,\r\n      name: null\r\n    }\r\n    this.uploadFile = this.uploadFile.bind(this)\r\n    this.captureFile = this.captureFile.bind(this)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        { this.state.loading\r\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\r\n          : <Main\r\n              files={this.state.files}\r\n              captureFile={this.captureFile}\r\n              uploadFile={this.uploadFile}\r\n            />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}